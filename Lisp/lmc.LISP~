;;;; -*- Mode: Lisp -*-
;;;; lmc.lisp


;; 28/11 cose semplici fino a one-istruction funzionante
;; CHIEDI DI FLAG E NOFLAG
;; CREA BENE L'INTESTAZIONE DEL FILE

;; controlla che la memoria sia 100 celle
(defun mem-is-in-range (x)
  (if (<= x 100) T
    nil))

;; controlla che x sia compreso tra 0 e 99
(defun mod-100 (x)
  (if (< x 100) T
    nil))

;; controlla che x sia compreso tra 0 e 999
(defun mod-1000 (x)
  (if (and (> x -1) (< x 1000)) T
    nil))

;; incrementa pc di 1. Se è 99 allora il prox numero è 0
(defun sum-pc (x)
  (if (null (mod-100 (+ 1 x))) 
    0
    (+ 1 x)))

;; controlla che gli elementi siano tutti compresi tra 0 e 999
(defun is-lista-1000 (l)
  (cond ((null l) T)
        ((null (mod-1000 (first l))) nil)
        (T (is-lista-1000 (rest l)))))

(defun set-acc-0 () 0)


(defun is-flag (x)
  (if (null (stringp x)) nil
   (string= "flag" x )))

(defun is-no-flag (x)
  (if (null (stringp x)) nil
   (string= "noflag" x )))

(defparameter flag (quote flag))
(defparameter noflag (quote noflag))

;; definizione di state e halted-state
(defstruct (state (:type list) :named) ACC PC MEM IN OUT FLAG)
(defstruct (halted-state (:type list) :named) ACC PC MEM IN OUT FLAG)

(defun new-state (acc pc mem in out f)
  (if (and (mod-100 pc)
           (or (equal flag f) (equal noflag f))
           (listp mem)
           (listp in)
           (listp out)
           (is-lista-1000 mem))
  (make-state :ACC acc :PC pc :MEM mem :IN in :OUT out :FLAG f)))

(defun new-halted-state (acc pc mem in out f)
  (if (and (mod-100 pc)
           (or (equal flag f) (equal noflag f))
           (listp mem)
           (listp in)
           (listp out)
           (is-lista-1000 mem))
  (make-halted-state :ACC acc :PC pc :MEM mem :IN in :OUT out :FLAG f)))

;; controllo se non ci sono errori
(defun one-istruction (s) 
  (cond ((null (state-p s)) (print "sadio"))
        (T (setf acc (state-ACC s))
           (setf pc (state-PC s))
           (setf mem (state-MEM s))
           (setf in (state-IN s))
           (setf out (state-OUT s))
           (setf f (state-FLAG s))
           (scorri-mem acc pc mem in out f))))

;; scorro la memoria
(defun scorri-mem (acc pc mem in out f) 
  (setf ist (nth pc mem))
  ;;(print ist)
  (if (null ist) nil
      (cond ((and (>= ist 100) (< ist 200)) (add-op acc ist pc mem in out))
            ((and (>= ist 200) (< ist 300)) (sub-op acc ist pc mem in out))
            ((and (>= ist 300) (< ist 400)) (store-op acc ist pc mem in out f))
            ((and (>= ist 500) (< ist 600)) (load-op acc ist pc mem in out f))
            ((and (>= ist 600) (< ist 700)) (branch-op acc ist pc mem in out f))
            ((and (>= ist 700) (< ist 800)) (branch-zero-op acc ist pc mem in out f))
            ((and (>= ist 800) (< ist 900)) (branch-positive-op acc ist pc mem in out f))
            ((= ist 901) (input-op acc ist pc mem in out f))
            ((= ist 902) (output-op acc ist pc mem in out f))
            ((and (>= ist 0) (< ist 100)) (halt-op acc ist pc mem in out f))
    )
  )
  )  

;; somma (1xx)
(defun add-op (acc ist pc mem in out) 
  (setf cell (mod ist 100))
  (setf a (nth cell mem))
  (cond ((null a) nil)
        ((null (mod-1000 (+ a acc))) (new-state (+ a acc) (sum-pc pc) mem in out flag))
        (T (new-state (+ a acc) (sum-pc pc) mem in out noflag))))

;; sottazione (2xx)
(defun sub-op (acc ist pc mem in out) 
  (setf cell (mod ist 100))
  (setf a (nth cell mem))
  (cond ((null a) nil)
        ((null (mod-1000 (- acc a))) (new-state (- acc a) (sum-pc pc) mem in out flag))
        (T (new-state (- acc a) (sum-pc pc) mem in out noflag))))

;; store (3xx)
(defun store-op (acc ist pc mem in out f)
  (setf cell (mod ist 100))
  (setf a (nth cell mem))
  (cond ((null a) nil)
        (T (and (setf (nth cell mem) acc) (new-state acc (sum-pc pc) mem in out f)))))

;; load (5xx)
(defun load-op (acc ist pc mem in out f)
  (setf cell (mod ist 100))
  (setf a (nth cell mem))
  (cond ((null a) nil)
        (T (new-state a (sum-pc pc) mem in out f))))

;; branch (6xx) (controllo che esiste quella parte di memoria o sti cazzi?)
(defun branch-op (acc ist pc mem in out f)
  (setf cell (mod ist 100))
  (new-state acc cell  mem in out f))

;; branch if zero (7xx) 
(defun branch-zero-op (acc ist pc mem in out f)
  (setf cell (mod ist 100))
  (if (and (equal f flag) (= acc 0)) (new-state acc cell mem in out f)
    nil))

;; branch if positive (8xx) 
(defun branch-positive-op (acc ist pc mem in out f)
  (setf cell (mod ist 100))
  (if (equal f flag) (new-state acc cell mem in out f)
    nil))
    
;; input (901)
(defun input-op (acc ist pc mem in out f)
  (setf a (first in))
  (cond ((null a) nil)
        (T (new-state a (sum-pc pc) mem (rest in) out f))))

;; output (902)
(defun output-op (acc ist pc mem in out f)
  (setf l (nreverse out))
  (new-state acc (sum-pc pc) mem in (nreverse (push acc l)) f))

;; halt (0xx)
(defun halt-op (acc ist pc mem in out f)
  (new-halted-state acc pc mem in out f))


;; 29/10 inizio execution-loop

(defun execution-loop (s)
  (exe-out s (state-MEM s)))

(defun exe-out (s l)
  (cond ((or (null (state-p s)) (halted-state-p s) (null (cdr l))) 
         (and (one-istruction s)
              (state-OUT s)))
        (T (and (one-istruction s)
                (exe-out s (cdr l))))))
  
(defun aggiungi-zeri (l)
  (if (< (length l) 100)
      (and (setf app (make-list (- 100 (length l)) :initial-element 0)) (append l app))
    nil))
      


;;;; end of file -- lmc.lisp 